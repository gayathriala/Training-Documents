##################
Day 13 - 24th Jan.
##################
			
		Containerization using Docker 
		Kubernetes 
		
		Containerization using Docker ::
		
		Terminologies :
		
		Install Docker 
		
		Work with Docker CLI Command 
		
		Build Docker Images 
			
		Docker Volumes 
		
		Overview of Docker Compose / Docker Swarm 
		
		Kubernetes
		
		
		Terminologies :
		
			Virtual Machines ::: ???
			
				- It called as Hardware Level Virtualization
				- It is created using Hypervisor
				- VMs are used to run the Operating System
				- VMs Consume more space and time to start-up.
				- VMs Consume the resources even if there is not Appln. is running.
			
			Containers ::: ?
			
				- It is called as OS Level Virtualization
				- It is created using Container Engine 
				- Containers are used to run the Applications NOT Operating System.
				- If we run any container without and task/application, that container will immediately go to EXIT State.
				- Control Group / Namespace - Using these core properties of Kernel, Container are execute in an isolated environment.
				- It consume very less space and time to start-up the application
				- Container Process will be faster compared to VMs.
				
				- Containers are used to reduce the no. of VMs
				
		Containers :::
		
		Infra-Structure Perspective :::
		
				Jenkins_Master(VM)			==> 	Create Jenkins Project and scheduling
					Jenkins_Slave1(VM)		==> 	Build Java 
					Jenkins_Slave2(VM)		==> 	Python
					Jenkins_Slave3(VM)		==> 	Angular/NodeJS
					
					
				Containerization Process ::
				
				Jenkins_Master(VM)					==> 	Create Jenkins Project and scheduling
					Jenkins_Build_Server(VM)				
						Container_Engine 
							Container1		==> Java Builds 
							Container2		==> Python 
							Container3		==> NodeJS 
		
		Deployment Perspective :::
		
			1. Coding - java web appln.
			2. Build - Compile and create artifacts - mywebapp.war_v1.0 / v1.1,......
			2.1. Perform Unit Testing 	--> Run & Test the artifacts in DEV Environment
											OpenJDK_11 / Tomcat8.5
			3. Deployed the artifacts to QA Server
			
					QA ==> mywebapp.war_v1.0 --> Oracle_jdk17,tomcat_9 	# Will get the compatibility Issue

					UAT ==> mywebapp.war_v1.0 --> jdk,tomcat

					PROD ==> mywebapp.war_v1.0 --> jdk,tomcat					
			
			Containerization Process ::		

			1. Coding - java web appln.
			2. Build - Compile and create artifacts - mywebapp.war_v1.0
			2.1. Perform Unit Testing 	--> Run & Test the artifacts in DEV Environment
											OpenJDK_11 / Tomcat8.5				
											
				Package the Application Artifacts along with the dependencies & Promote that Package to Target Environment.
				
					mywebapp.war_v1.0 ===> mywebapp_pkg_v1.0(mywebapp.war_v1.0,OpenJDK_11,Tomcat8.5)  ==>  mywebapp_pkg_v1.0
				
				The Package ==> Application Image

						These Application Images are deployed in the target environment and executed as containers.
					
			3. Deployed the artifacts to QA Server
			
					QA ==> mywebapp_pkg_v1.0

					UAT ==> mywebapp_pkg_v1.0
					
					PROD ==> mywebapp_pkg_v1.0		


			Terminologies ::
			
				- Image					# It is a static file that defines the properties of the container.
										# It is composed of Application Artifact and the dependencies in the form of Layer.
										# These layers are defined using the Dockfile Instructions
										# Images are non-executable
									
				
				- Container 			# Containers are the executable units of Images

				- Container Registry	# Is used to store and Manage the Container Images.
											DockerHub --> Enterprise Level
												DEV1,2,3,4,5
											
				- Repository			# Sub-set of Container Registry 
				
				
			Installation of Container Engine 
					https://docs.docker.com/engine/install/
					
						sudo apt install docker.io -y
						
			Container Rgistry ==> Create Account in Dockerhub	- https://hub.docker.com/
			
			Docker CLI Commands 
			
			docker images 		# Used to get the list of Images in the Local Machine 
			
			
			docker pull <image_name>	# Used to just download an Image from Dockerhub registry to Local Machine .
			
			docker ps 			# Used to get the list of running containers 
			
			docker ps -a 		# Used to get the list all containers - ( running / exit state )
			
			
			docker run <image_name>			# Used to create and run the container using the container image.
				
				
				3 Modes of Container Execution :::
				
					- Foreground / Attached Mode 		# Default Mode
							Eg.:  
							 docker run centos
							 docker run centos sleep 20
							 docker run centos echo "Hello"							 
					
					- Background / Detached Mode 
							Eg.: 
								docker run -d centos sleep 20
								docker run -d centos echo "Hello"								
								
					- Interactive Mode
							Eg.: 
								docker run -it centos bash 
								
								
			docker rmi		# Used to remove the Container image from local  
					Eg.: 
						docker rmi <image_name>
						
						docker rmi -f <image_name>		# Force Removal 
				
			docker rm 		# Used to remove the Container from local 
			
					Eg.: docker rm <container_id> 
					
			docker start <container_id> 
			
			docker stop <Container_id>
			
			docker kill <Container_id>
								
			docker exec 			# It is used to login to a running container.
				Eg.: 
					docker exec -it <container_id> bash 
				
			Difference between 

				docker run 								# Used to create and run the container using the container image.
						docker run -it centos bash 
				docker exec 
						docker exec -it <container_id> bash 			# It is used to login to a running container.

   29  sudo apt install docker.io -y
   30  docker --version
   31  c
   32  ear
   33  clear
   34  docker --version
   35  docker images
   36  docker ps
   37  docker ps -a
   38  docker images
   39  docker pull centos
   40  docker images
   41  docker ps -a
   42  docker run centos
   43  docker ps
   44  docker ps -a
   45  clear
   46  docker images
   47  docker run centos sleep 20
   48  adf
   49  asdf
   50  as
   51  df
   52  asdf
   53  clear
   54  docker run centos sleep 20
   55  docker run -d centos sleep 20
   56  docker ps
   57  clear
   58  docker images
   59  docker ps -a
   60  docker ps
   61  docker run -d --name=dummy centos sleep 20
   62  docker ps
   63  clear
   64  docker run centos sleep 20
   65  docker run -d centos sleep 20
   66  clear
   67  docker images
   68  docker run -it centos
   69  clear
   70  docker images
   71  docker run ubuntu
   72  docker images
   73  docker ps -a
   74  clear
   75  docker ps -a
   76  docker rm f3dd4a68f109 a043898 927f2163da99
   77  docker ps -a
   78  docker images
   79  docker rmi ubuntu
   80  docker rm 6b2c859df3f8
   81  docker rmi ubuntu
   82  docker images
   83  clear
   84  docker ps -a
   85  docker start 311b224a0365
   86  docker ps -a
   87  docker start 311b224a0365
   88  docker stop 311b224a0365
   89  clear
   90  docker images
   91  docker run centos sleep 60
   92  history

   28  docker ps
   29  clear
   30  docker ps
   31  docker exec -it 1a1084a566b9 bash
   32  docker ps -a
   33  history


##################
Day 14 - 25th Jan.
##################
			
			Port Mapping 
			Docker Volumes 
			Create Docker Images 
			Login to Dockerhub using docker cli 
			push the images to dockerhub 
			overview of Docker Compose and Docker Swarm 
			
			Kubernetes
				
				
			Execute a web application inside container 
			
			Port Mapping - Is used to map/bind the ports between container and the host port
							Expose the container to internet
			
						
			<public_ip_Addr>:8080		
			
			docker run -it -p 8085:8080 tomcat:8.0
			
				-p <host_port>:<container_port> 
			
			13.201.188.212:8085 => 
			
			
			Volumes :::
			
				C1 -> need some input / creates some output :::
				
			Docker Volumes ::::
			
				Application Architecture :::
				
				Stateless Application
					- Application which never leave any trace of execution
					- This doesnt req. any volume to store the data.
					
				
				Stateful Application
					- Applications that leave the trace of execution in the form of logs/reports/status
					- This req. Volumes to store the data 
					
			Persistant Volume --> Is used maintain the container data even after the lifetime of container.
			
			Create Docker Container Image :::
			
			
				- docker commit	  # container_id is the input 
						USed to create container image using existing container reference.
						
							docker run -it debian bash :::
							install git/jdk/maven 
							exit 
							
							
							
							docker commit 2e1d6cbbcb5e loksaieta/jan08gitimg:v1.0
				
				- docker build 	  # Dockerfile is the input 			# Recommended in packaing the application images.
						USed to create container image without any container reference.

					Dockerfile 
					
						docker build -t loksaieta/jan08mygitimg .
						
				Write Docker File :::
				
					Is composed of Instructions ::
					FROM 	# refer the base image 
					RUN 	# run the package manager in the container 
					COPY 	# copy the file from host volume to container volume 
					CP 		# copy the file within the container volumes 
					WORKDIR	# refer the present working directory 
					ENV 	# to define environment variable within the container
					EXPOSE  # to expose container port
					CMD 	# to run startup command/task, this can used to pass runtime inputs  
					ENTRYPOINT # to run the startup command/task, but this cannot be modified at runtime 
					
				Docker Push :::
				
				- connect to dockerhub using docker cli.
				
				- access token 
					- Create access token in dockerhub 		
					- login 								docker login -u loksaieta
					- push the images 						docker push <image_name>:<tag>
					
					
					
				Deploy the images in target environment using kubernetes 	
				
				Docker Compose :::			
				
					- Used to run multiple Containers as a single service.
					- Docker-Compose file using *.yaml - Manifest file - defines the service to run containers.
					
				Eg.: 
				
					User_Registration Service ::: 3-tier
					
						- Front_End					C1 - 3 replicas of C1 
						
						- Application_Layer			C2 - 3 replicas of C2 
						
						- Back_End(Dbase)			C3 - 3 replicas of C3
					

				Container Orchestration Tool ::::
				
					Used to Orchestrate the Container to ensure high availability 
					
					Docker Swarm  is the Container Orchestration tool only for Docker Container.
						- Used to ensure high availability of the container
						- Create Replicas of Container 
								
							
						
					Kubernetes 	is the Container Orchestration tool for any type of Container.
						- Used to ensure high availability of the container
						- Create Replicas of Container
						- Perform Autoscaling 
						- Load Balancing 
						
						
			Micro-Service based Application Deployments 
			
				Docker 			Create and push the images to Container Registry 
				
				Kubernetes 		Deploy the Containers in target environment, by creating replicas, autoscaling, loadbalancing

  100  clear
  101  docker ps
  102  docker ps -a
  103  docker run -it -p 8085:8080 tomcat:8.0
  104  history


  100  clear
  101  docker ps
  102  docker stop d9b9f4828b5a 9170463b5ca5 f8c7f1620764
  103  clear
  104  docker run -it centos bash
  105  docker volume list
  106  docker volume create jan08vol1
  107  docker volume list
  108  docker volume inspect jan08vol1
  109  cd /var/lib/docker/volumes/
  110  clear
  111  ls
  112  cd jan08vol1/
  113  ls
  114  cd _data/
  115  pwd
  116  ls
  117  docker volume inspect jan08vol1
  118  docker run -it centos bash
  119  docker run -it --mount source=jan08vol1 destination=/jan08vol1 centos bash
  120  docker run -it --mount source=jan08vol1,destination=/jan08vol1 centos bash
  121  pwd
  122  ls
  123  docker ps
  124  docker ps -a
  125  ls
  126  cat fromcontainer.txt
  127  echo "rec1" >> hostfile1.txt
  128  ls
  129  docker run -it --mount source=jan08vol1,destination=/jan08vol1 centos bash
  130  clear
  131  cd ~
  132  docker run -it debain bash
  133  docker run -it debain
  134  clear
  135  docker run -it debian
  136  docker ps -a
  137  docker start 2e1d6cbbcb5e
  138  docker exec -it 2e1d6cbbcb5e bash
  139  docker images
  140  docker commit 2e1d6cbbcb5e loksaieta/jan08gitimg:v1.0
  141  docker images
  142  docker run -it loksaieta/jan08gitimg:v1.0 bash
  143  clear
  144  mkdir docker_contents
  145  cd docker_contents/
  146  vi Dockerfile
  147  cat Dockerfile
  148  docker images
  149  docker build -t loksaieta/jan08mygitimg .
  150  docker images
  151  cat Dockerfile
  152  ls
  153  docker images
  154  docker history tomcat
  155  docker history tomcat:8.0
  156  docker history tomcat
  157  docker images
  158  docker history loksaieta/jan08mygitimg:latest
  159  clear
  160  docker ps -a
  161  docker history centos
  162  docker images
  163  docker login -u loksaieta
  164  docker push loksaieta/jan08mygitimg
  165  docker push loksaieta/jan08gitimg:v1.0
  166  docker imag
  167  clear
  168  history

Kubernetes ::::
