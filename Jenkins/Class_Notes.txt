ops
####################
Day 7 - 16th Jan.
####################	
	
		
Jenkins Module ::::

		Build Orchestration Tool - Jenkins 
		
			CI/CD automation :::
			
			Jenkins Architecture :
			
			Master/Slave Architecture!
			
				Jenkins_Master (VM) - Install Jenkins -- It is used to create Jenkins Jobs/Projects and schedule these jobs to the slave nodes.
				
					Jenkins_Slave_Node1	(VM) --> Build Servers - Java Project - jdk, maven 
					Jenkins_Slave_Node2	(VM) --> Build Servers - Python Project - Python
					Jenkins_Slave_Node3	(VM) --> Build Servers - .Net - .net core
					Jenkins_Slave_Node4	(VM) --> Build Servers - Angular Project 
					Jenkins_Slave_Node5	(VM) --> Build Servers - NodeJS 
					Jenkins_Slave_Node6	(VM) --> Build Servers - Ruby	

				Distribute the workload / Load Balancing!
				
			The Core Features of Jenkins 

		DevOps Role in Jenkins :::
		
		Jenkins :
			
				Developers' Perspective  
					Developers are just the consumers. 
				
				DevOps Perspective ::
				
					Adminstrate overall Jenkins activities
					Installation of Jenkins 
					Management of Plugins 
					User Management 
					Security Management 
					Tools Management 
					System Management 
					Creation CI/CD pipeline Projects 
					Onboarding the applications Team to Jenkins to automate the builds and Deployments 
					Periodic Upgrades 
					Backup & Recovery.
				
			Installation of Jenkins :::
				https://www.jenkins.io/doc/book/installing/
				
				
				AWS Account ???
				
				EC2 Instance :: Virtual Machine in AWS Cloud Platform 
				
				Launch Ubuntu 20.04 ami
				t2.micro
				
				Linux Distributions ::
				
				Package Manager are used to install and mange the packages in Linux machines 
				
				Ubuntu 					apt 
				centos 					yum 
				rhel 					yum 	
				fedora					dnf 
				
				
				1 VM - 750 Hrs / Month 
				10 VMs - 75 Hrs 
				
				
				How to Connect to the Instance ::::
				
					EC2 Instance Connect 
					
					SSH Agents - MobaXterm / Putty 	-- Windows 
					
						https://mobaxterm.mobatek.net/download.html 
					
					Terminals 
				
####################
Day 8 - 17th Jan.
####################

			Installation of Jenkins & Configuration :::
				https://www.jenkins.io/doc/book/installing/		


			Linux Boxes ::
			
			1. Install the Pre-Requisites 
			2. Install the actual tool 
			3. Post Installation Actions

# Install JDK :

sudo -i			
sudo apt update -y
sudo apt install openjdk-17-jre -y
java -version				
				
# Install Jenkins :

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get install jenkins -y
		
To Access Jenkins using Web Browser :

<public_ip_Addr>:8080

/var/lib/jenkins

https://updates.jenkins.io/download/plugins/docker-plugin/1.4/docker-plugin.hpi


				DevOps Perspective ::
				
					Adminstrate overall Jenkins activities
					Installation of Jenkins 
					Management of Plugins 
					User Management 
					Security Management 
					Tools Management 
					System Management 
					Trouble Shooting the Issues
					Creation of Free-Style and CI/CD pipeline Projects 
					Configure the Jenkins Slave Nodes
					Onboarding the applications Team to Jenkins to automate the builds and Deployments 
					Periodic Upgrades 
					Backup & Recovery.
					
					
	JEnkins Projects/Jobs ::

		-- Free Style Project 
				Configured manually
		
		Variables ::::
		
			Environment Variables
			
				echo "jenkins-${JOB_NAME}-${BUILD_NUMBER}"
			
			User-Defined Variables 
			
			
			
		-- Pipeline Projects 
				- Configurations are done thru scripts - groovy
				
			- Scripted Pipeline : Use typical Groovy scripting
					
			
			- Declarative Pipeline :
			
					Pipeline is composed of various stages :::
					
				Build and Deployment of a java project :::
				
					Using DevOps Approach :::
					
					
						Coding --> *.java		-- save the source code in a source code repository like GIT
						
							IDEs - Eclipse based IDEs - Visual Studio Code / Visual Studio / Pycharm / Intellij
						
					Using DevOps Automate :
						Automated Build --> Compile the code and create artifacts(Binaries - *.war/*.jar)
						Automated Unit Testing 
						Automate - promote the changes for further testing 
						Automate - Notify the testing team 	

				Pipeline Project :
				
				Stage1 : Checkout the src_code from github
				Stage2 : Maven Build
				Stage3 : Unit Testing 
				Stage4 : Promote the Code to QA 
				Stage5 : Email Notify the Users
				
				
			
			
	Jenkins 
	
	Azure pipeline		*.yaml --> key & Values - key:value pairs - Declarative Language
	gitlab-ci 
	aws code commit 
	bamboo

				Pipeline Project :
				
				Stage1 : Checkout the src_code from github
				Stage2 : Maven Build
				Stage3 : Unit Testing 
				Stage4 : Promote the Code to QA 
				Stage5 : Email Notify the Users
				
Declarative Pipeline :
	
pipeline {
    agent any

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				
            }
        }
        stage('Java Maven Build') {
            steps {
                echo 'Java App build'
				
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Deploy the Artifacts to QA Server'
				
            }
        }
    }
}


##################
Day 9 - 18th Jan.
##################

	CICD Pipeline :::
	
		Confiugure Jenkins_Slave Node!
		
		VM - Java Web Application - Builds 
			Java -> ANT/GRADLE/Maven 
			
			
			Maven Build Tool ::	
			
				Build --> Compile 
				Create Artifacts --> Binaries (*.war/*.jar)
				Unit Testing - JUNIT 
				
				Dependencies :
					It used automatically Install all the dependencies and plugins required for Builds 
					
				pom.xml ==> default congi file for Maven
				Maven Goals ==> 
					Compile 
					Test 	-> code compilation & Testing
					Package -> compile, create artifacts & unit test
						target/
							*.war								
					clean   -> Used to clean-up the existing target folder before creating new artifacts 
					

			1. Create a Build Server / Jenkins_slave_Node 
			2. Install all the required Build Tools 
				jdk,maven,git
			
			Jenkins_Master(VM) 			==> Installed - jdk, jenkins 
				Jenkins_Slave_Node(VM) 	==> jdk,maven,git

				HOST_Name 
				User_Name & Credentials 
				SSH Connection --> 22
				
			3. Create valid user in the slave Node 
			4. Create the Credentials for Authentication
				Authentication ::
					- Password based Authentication
					- Token based Authentication
					- Key based Authentication
					- Passwordless Authentication
				ssh-keygen 
			5. Configure the slave node to Jenkins_Master 
					Goto Jenkins Dashboard - Manage Jenkins - Add Nodes 
			

#Configure Slave Node1 for Java Maven App. :

sudo -i

apt update -y 

Install Java ::

sudo apt update -y 
sudo apt install openjdk-11-jre -y
java -version

Install GIT :

git --version 

sudo apt install git -y

Install Maven - Build Tool :
https://maven.apache.org/install.html

sudo apt install maven -y 


Create User in Jenkins Slave Machine & Create SSH Keys 

	SSH Keys --> is composed of public and private keys 


#Add User : 

#useradd devopsadmin 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 2048 -m PEM


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh


			Environments:::
			
				Non-Prod Environment										====>					Production Environment
				
					Dev Environment 
					Build Environment 
					Test Environment
						QA - Quality Assurance 
						UAT - User Acceptance Testing						===>						Prod Environment
					
	
	
pipeline {
     agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
				
            }
        }
        stage('Java Maven Build') {
            steps {
                echo 'Java App build'
				sh "mvn clean package"
				
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Deploy the Artifacts to QA Server'
				
            }
        }
    }
}

Next :::

	Tomcat Server Config and Deployments!

	Tomcat Web Application Server --> 				

##################
Day 10 - 19th Jan.
##################

	Tomcat Server Config and Deployments!

	Tomcat Web Application Server -->
	
	Build Triggers -- Build Automation 
	
	EMail Notifications 
	
	- Ansible!
	
	
	CI/CD Pipeline 
	
	Tomcat/Nginx - Web Application Server 
	
	Deployment ::: It is a processing of copying the artifacts from one Environment to another.
	
	Launch a VM - Ubuntu for Tomcat server and add port 8080.
	
	jdk,tomcat 

		Jenkins_Master 
			Jenkins_Slave 
		Tomcat_Server
		
		<public_ip_address>:8080
		52.66.248.170:8080
		
	Deployment ::: It is a processing of copying the artifacts from one Environment to another.
	
	Source_Environment/Machine 									====>	Target_Environment/Machine 
	
		Jenkins_Slave_Node 														Tomcat_Server
			target/mvn-hello.war															/opt/tomcat/webapps/mvn-hello.war
	
	devopsadmin - user
	
		

######################Install TOMCAT Application Server on Ubuntu :::

sudo -i

sudo apt update -y 


sudo apt install openjdk-11-jre -y 
java -version

#edit /etc/profile & add JAVA_HOME

#/usr/lib/jvm/java-11-openjdk-amd64/

vi /etc/profile

java-11-openjdk-amd64


export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

source /etc/profile

Install Tomcat ::  https://tomcat.apache.org/download-80.cgi

https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.98/bin/apache-tomcat-8.5.98.tar.gz

cd /opt
wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.98/bin/apache-tomcat-8.5.98.tar.gz
tar -xvzf /opt/apache-tomcat-8.5.98.tar.gz

mv apache-tomcat-8.5.98 tomcat

#Start Tomcat Server:
#Goto:

cd /opt/tomcat/bin
./startup.sh

###########################################

#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 2048 -m PEM


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#make devopsadmin user as a owner to tomcat dir :

chown -R devopsadmin /opt/tomcat

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Using Publish over SSH Plugin 
	- we can connect to any remote server and copy the files/artifacts
	
	
pipeline {
     agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
				
            }
        }
        stage('Java Maven Build') {
            steps {
                echo 'Java App build'
				sh "mvn clean package"
				
            }
        }
        stage('Deploy to QA Environment') {
            steps {
				script {
					sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}				
            }
        }
    }
}


sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])


Build Triggers ::

	Build Periodic :::
	
			Used to start the jenkins Jobs based on the schedule.
	
			Start_Jenkins_Job :;		Build Periodic - 8AM Daily Basis
			
				script - start the server 

			Stop_Jenkins_Job :;		Build Periodic - 10PM Daily Basis
			
				script - stop the server 

	
	Github Webhook 
	
			Used to trigger the Jenkins Jobs, as soon as the changes are pushed into the source code repository.
			
			Configure webhook and payload url in the repository setting
			
			
	
	Poll SCM 
			Uses the crontab and github repos events
			Used to trigger the jenkins Jobs based on the schedule, only if there is any changes happened in the src_code repo..
			
		
		Test Cycle :::
		
		8AM 	12PM	3PM			Daily 
		
			
	
	
	
	Non-Prod Servers(Business Hours) 					Prod Servers
	
	DEV 
	BUILD 
	QA 
	UAT 													PROD???
	
http://35.154.138.9:8080/github-webhook/


Notifications ::

Email Notifications :::

	Can be defined as a post build event.
	
	Build Status :::
	
		Success 
		failure 
		unstable

To Setup the Email Configs.: 	

Email Notification Plugins :::

SMTP Server :
smtp.gmail.com

SMTP Authentication
	User Name : <email_id>
	Password  : <App Token>  kozb lqqo visz sxkb

SMTP Port :: 465

Reply-To Address : <email_id>

Login to Gmail :::

Click Account Settings

select Security tab

Two-Way Authentication -> MFA --> mobile#

Create App Password = 16Bytes of token -  kozblqqoviszsxkb

What ? window
Which Appln - email		

Jenkins :::
	
		Install, archi, Management of Jenkins 
		pipeline 
		Node Configs
		Remote server 
		CICD pipeline 

NEXT :::		
		
Ansible :::

	IAC Tool -- CMS
